Phase: Entity
Input: NounGroup Token Location
Options: control = appelt debug = true  
 
Rule: Entity
({NounGroup notWithin {NoEntity}})
:entity
-->
{  
AnnotationSet entity = bindings.get("entity");  
Annotation entityAnn = entity.iterator().next();  
FeatureMap features = Factory.newFeatureMap();  
String root = (String) entityAnn.getFeatures().get("root");
String string = (String) entityAnn.getFeatures().get("string");
String capString = string.substring(0, 1).toUpperCase() + string.substring(1);
String proper = (String) entityAnn.getFeatures().get("proper");
if(proper.equals("false")){
   System.out.println("possible entity " + string);
	 ArrayList basicIntentsArray = (ArrayList) doc.getFeatures().get("basicIntents"); 
   Iterator intentsIterator = basicIntentsArray.iterator();
	 ArrayList intentsArray = (ArrayList) doc.getFeatures().get("intents");
	 while(intentsIterator.hasNext()){
	   String basicIntent = (String) intentsIterator.next();
		 String compoundIntent = basicIntent + capString;
		 intentsArray.add(compoundIntent);
		 System.out.println("possible compound intent " + compoundIntent);
	 }
   features.put("rule", "Entity1"); 
   features.put("root",root); 
   features.put("string",string); 
   outputAS.add(entity.firstNode(), entity.lastNode(),  
                              "Entity", features);  
															}
}

Rule: Entity
({Location notWithin {NoEntity}})
:entity
-->
{  
AnnotationSet entity = bindings.get("entity");  
FeatureMap features = Factory.newFeatureMap();  
System.out.println("possible entity " + "Location");
features.put("rule", "Entity2"); 
outputAS.add(entity.firstNode(), entity.lastNode(),  
                              "Entity", features);  
}


//Number, Currency, NamedEntity types, Organization