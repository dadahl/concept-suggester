Phase: Entity
Input: NounGroup Token Location Person Date Number Money Organization Time Percentage NamedEntity
Options: control = appelt 
debug = true  
 


Rule: Entity
({NounGroup notWithin {NoEntity},!NamedEntity})
:entity
-->
{  
AnnotationSet entity = bindings.get("entity");  
Annotation entityAnn = entity.iterator().next();  
FeatureMap features = Factory.newFeatureMap();  
String root = (String) entityAnn.getFeatures().get("root");
String string = gate.Utils.cleanStringFor(doc,entityAnn);
String noSpaces = string.replaceAll("\\s+","");
String capString = string.substring(0, 1).toUpperCase() + noSpaces.substring(1);
String proper = (String) entityAnn.getFeatures().get("proper");
if(proper.equals("false")){
   System.out.println("possible entity:" + string);
   features.put("rule", "Entity1"); 
   if(root != null){
    features.put("root",root); 
   }
   }
   else{
   features.put("root",string);}
   features.put("string",string); 
   outputAS.add(entity.firstNode(), entity.lastNode(),  
                              "Entity", features);  
															}

Rule: Entity
(({Token.category == nn,!NamedEntity}) | 
({Token.category == NN,!NamedEntity}) |
({Token.category == NNS,!NamedEntity}) |
({Token.category == nns,!NamedEntity}))
:entity
-->
{  
AnnotationSet entity = bindings.get("entity");  
Annotation entityAnn = entity.iterator().next();  
FeatureMap features = Factory.newFeatureMap();  
String root = (String) entityAnn.getFeatures().get("root");
String string = gate.Utils.cleanStringFor(doc,entityAnn);
String noSpaces = string.replaceAll("\\s+","");
String capString = string.substring(0, 1).toUpperCase() + noSpaces.substring(1);
System.out.println("possible entity: " + string);
ArrayList basicIntentsArray = (ArrayList) doc.getFeatures().get("basicIntents"); 
Iterator intentsIterator = basicIntentsArray.iterator();
ArrayList intentsArray = (ArrayList) doc.getFeatures().get("intents");
features.put("rule", "Entity2"); 
if(root != null){
 features.put("root",root); 
 }
else{
 features.put("root",string);}
features.put("string",string); 
outputAS.add(entity.firstNode(), entity.lastNode(),  
													"Entity", features);  
}

Rule: Entity
({Location notWithin {NoEntity}})
:entity
-->
{  
AnnotationSet entity = bindings.get("entity");  
Annotation entityAnn = entity.iterator().next(); 
String root = (String) entityAnn.getFeatures().get("root");
String string = gate.Utils.cleanStringFor(doc,entityAnn);
//System.out.println("possible entity:" + "Location with value " + string);
FeatureMap features = Factory.newFeatureMap();  
features.put("root","Location");
features.put("string",string); 
outputAS.add(entity.firstNode(), entity.lastNode(),  
                              "Entity", features);  
}

Rule: Entity
({Person notWithin {NoEntity}})
:entity
-->
{  
AnnotationSet entity = bindings.get("entity");  
Annotation entityAnn = entity.iterator().next(); 
String string = gate.Utils.cleanStringFor(doc,entityAnn);
String root = (String) entityAnn.getFeatures().get("root");
FeatureMap features = Factory.newFeatureMap();  
//System.out.println("possible entity:" + "Person with value " + string);
features.put("rule", "Entity3"); 
features.put("root","Person"); 
features.put("string",string); 
outputAS.add(entity.firstNode(), entity.lastNode(),  
                              "Entity", features);  
}

Rule: Entity
({Date notWithin {NoEntity}})
:entity
-->
{  
AnnotationSet entity = bindings.get("entity");  
Annotation entityAnn = entity.iterator().next(); 
String string = gate.Utils.cleanStringFor(doc,entityAnn);
String root = (String) entityAnn.getFeatures().get("root");
FeatureMap features = Factory.newFeatureMap();  
//System.out.println("possible entity:" + "Date with value " + string);
features.put("root","Date"); 
features.put("string",string); 
features.put("rule", "Entity4"); 
outputAS.add(entity.firstNode(), entity.lastNode(),  
                              "Entity", features);  
}

Rule: Entity
({Money notWithin {NoEntity}})
:entity
-->
{  
AnnotationSet entity = bindings.get("entity");  
Annotation entityAnn = entity.iterator().next(); 
String string = gate.Utils.cleanStringFor(doc,entityAnn);
String root = (String) entityAnn.getFeatures().get("root");
FeatureMap features = Factory.newFeatureMap();  
//System.out.println("possible entity:" + "Money with value " + string);
features.put("root","Money");
features.put("string",string); 
features.put("rule", "Entity5"); 
outputAS.add(entity.firstNode(), entity.lastNode(),  
                              "Entity", features);  
}
Rule: Entity
({Organization notWithin {NoEntity}})
:entity
-->
{  
AnnotationSet entity = bindings.get("entity");  
Annotation entityAnn = entity.iterator().next(); 
String string = gate.Utils.cleanStringFor(doc,entityAnn);
String root = (String) entityAnn.getFeatures().get("root");
FeatureMap features = Factory.newFeatureMap();  
//System.out.println("possible entity:" + "Organization with value " + string);
features.put("root","Organization");
features.put("string",string); 
features.put("rule", "Entity6"); 
outputAS.add(entity.firstNode(), entity.lastNode(),  
                              "Entity", features);  
}
Rule: Entity
({Time notWithin {NoEntity}})
:entity
-->
{  
AnnotationSet entity = bindings.get("entity");  
Annotation entityAnn = entity.iterator().next(); 
String string = gate.Utils.cleanStringFor(doc,entityAnn);
String root = (String) entityAnn.getFeatures().get("root");
FeatureMap features = Factory.newFeatureMap();  
//System.out.println("possible entity:" + "Time with value " + string);
features.put("root","Time");
features.put("string",string); 
features.put("rule", "Entity7"); 
outputAS.add(entity.firstNode(), entity.lastNode(),  
                              "Entity", features);  
}
Rule: Entity
({Percentage notWithin {NoEntity}})
:entity
-->
{  
AnnotationSet entity = bindings.get("entity");  
Annotation entityAnn = entity.iterator().next(); 
String string = (String) entityAnn.getFeatures().get("string"); 
String root = (String) entityAnn.getFeatures().get("root");
FeatureMap features = Factory.newFeatureMap();  
//System.out.println("possible entity:" + "Percentage with value " + string);
 features.put("root","Percentage");
features.put("string",string); 
features.put("rule", "Entity8"); 
outputAS.add(entity.firstNode(), entity.lastNode(),  
                              "Entity", features);  
}

